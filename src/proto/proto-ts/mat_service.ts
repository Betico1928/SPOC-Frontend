// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "mat_service.proto" (package "signal", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message signal.MatRequest
 */
export interface MatRequest {
    /**
     * @generated from protobuf field: bytes file_content = 1;
     */
    fileContent: Uint8Array;
    /**
     * @generated from protobuf field: string field = 2;
     */
    field: string;
}
/**
 * @generated from protobuf message signal.MatResponse
 */
export interface MatResponse {
    /**
     * @generated from protobuf field: repeated signal.Vector matrix = 1;
     */
    matrix: Vector[];
}
/**
 * @generated from protobuf message signal.Vector
 */
export interface Vector {
    /**
     * @generated from protobuf field: repeated float numbers = 1;
     */
    numbers: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class MatRequest$Type extends MessageType<MatRequest> {
    constructor() {
        super("signal.MatRequest", [
            { no: 1, name: "file_content", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "field", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MatRequest>): MatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fileContent = new Uint8Array(0);
        message.field = "";
        if (value !== undefined)
            reflectionMergePartial<MatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatRequest): MatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes file_content */ 1:
                    message.fileContent = reader.bytes();
                    break;
                case /* string field */ 2:
                    message.field = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes file_content = 1; */
        if (message.fileContent.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.fileContent);
        /* string field = 2; */
        if (message.field !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.field);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message signal.MatRequest
 */
export const MatRequest = new MatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatResponse$Type extends MessageType<MatResponse> {
    constructor() {
        super("signal.MatResponse", [
            { no: 1, name: "matrix", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<MatResponse>): MatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.matrix = [];
        if (value !== undefined)
            reflectionMergePartial<MatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatResponse): MatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated signal.Vector matrix */ 1:
                    message.matrix.push(Vector.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated signal.Vector matrix = 1; */
        for (let i = 0; i < message.matrix.length; i++)
            Vector.internalBinaryWrite(message.matrix[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message signal.MatResponse
 */
export const MatResponse = new MatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Vector$Type extends MessageType<Vector> {
    constructor() {
        super("signal.Vector", [
            { no: 1, name: "numbers", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Vector>): Vector {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.numbers = [];
        if (value !== undefined)
            reflectionMergePartial<Vector>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Vector): Vector {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated float numbers */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.numbers.push(reader.float());
                    else
                        message.numbers.push(reader.float());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Vector, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated float numbers = 1; */
        if (message.numbers.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.numbers.length; i++)
                writer.float(message.numbers[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message signal.Vector
 */
export const Vector = new Vector$Type();
/**
 * @generated ServiceType for protobuf service signal.MatService
 */
export const MatService = new ServiceType("signal.MatService", [
    { name: "readMat", options: {}, I: MatRequest, O: MatResponse }
]);
