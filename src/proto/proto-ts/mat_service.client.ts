// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "mat_service.proto" (package "signal", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MatService } from "./mat_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MatResponse } from "./mat_service";
import type { MatRequest } from "./mat_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service signal.MatService
 */
export interface IMatServiceClient {
    /**
     * @generated from protobuf rpc: readMat(signal.MatRequest) returns (signal.MatResponse);
     */
    readMat(input: MatRequest, options?: RpcOptions): UnaryCall<MatRequest, MatResponse>;
}
/**
 * @generated from protobuf service signal.MatService
 */
export class MatServiceClient implements IMatServiceClient, ServiceInfo {
    typeName = MatService.typeName;
    methods = MatService.methods;
    options = MatService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: readMat(signal.MatRequest) returns (signal.MatResponse);
     */
    readMat(input: MatRequest, options?: RpcOptions): UnaryCall<MatRequest, MatResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MatRequest, MatResponse>("unary", this._transport, method, opt, input);
    }
}
