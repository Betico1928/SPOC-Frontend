// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "math.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SumService } from "./math";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Numeric } from "./math";
import type { numbers } from "./math";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service SumService
 */
export interface ISumServiceClient {
    /**
     * @generated from protobuf rpc: suma(numbers) returns (Numeric);
     */
    suma(input: numbers, options?: RpcOptions): UnaryCall<numbers, Numeric>;
}
/**
 * @generated from protobuf service SumService
 */
export class SumServiceClient implements ISumServiceClient, ServiceInfo {
    typeName = SumService.typeName;
    methods = SumService.methods;
    options = SumService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: suma(numbers) returns (Numeric);
     */
    suma(input: numbers, options?: RpcOptions): UnaryCall<numbers, Numeric> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<numbers, Numeric>("unary", this._transport, method, opt, input);
    }
}
