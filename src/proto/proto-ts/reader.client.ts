// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "reader.proto" (package "signal", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ABFService } from "./reader";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ABFResponse } from "./reader";
import type { ABFRequest } from "./reader";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service signal.ABFService
 */
export interface IABFServiceClient {
    /**
     * @generated from protobuf rpc: readAbf(signal.ABFRequest) returns (signal.ABFResponse);
     */
    readAbf(input: ABFRequest, options?: RpcOptions): UnaryCall<ABFRequest, ABFResponse>;
}
/**
 * @generated from protobuf service signal.ABFService
 */
export class ABFServiceClient implements IABFServiceClient, ServiceInfo {
    typeName = ABFService.typeName;
    methods = ABFService.methods;
    options = ABFService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: readAbf(signal.ABFRequest) returns (signal.ABFResponse);
     */
    readAbf(input: ABFRequest, options?: RpcOptions): UnaryCall<ABFRequest, ABFResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ABFRequest, ABFResponse>("unary", this._transport, method, opt, input);
    }
}
