// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "reader.proto" (package "signal", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message signal.ABFRequest
 */
export interface ABFRequest {
    /**
     * @generated from protobuf field: bytes file_content = 1;
     */
    fileContent: Uint8Array;
}
/**
 * @generated from protobuf message signal.ABFResponse
 */
export interface ABFResponse {
    /**
     * @generated from protobuf field: repeated float numbers = 1;
     */
    numbers: number[];
    /**
     * @generated from protobuf field: int32 sp = 2;
     */
    sp: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ABFRequest$Type extends MessageType<ABFRequest> {
    constructor() {
        super("signal.ABFRequest", [
            { no: 1, name: "file_content", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ABFRequest>): ABFRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fileContent = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ABFRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ABFRequest): ABFRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes file_content */ 1:
                    message.fileContent = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ABFRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes file_content = 1; */
        if (message.fileContent.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.fileContent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message signal.ABFRequest
 */
export const ABFRequest = new ABFRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ABFResponse$Type extends MessageType<ABFResponse> {
    constructor() {
        super("signal.ABFResponse", [
            { no: 1, name: "numbers", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "sp", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ABFResponse>): ABFResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.numbers = [];
        message.sp = 0;
        if (value !== undefined)
            reflectionMergePartial<ABFResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ABFResponse): ABFResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated float numbers */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.numbers.push(reader.float());
                    else
                        message.numbers.push(reader.float());
                    break;
                case /* int32 sp */ 2:
                    message.sp = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ABFResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated float numbers = 1; */
        if (message.numbers.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.numbers.length; i++)
                writer.float(message.numbers[i]);
            writer.join();
        }
        /* int32 sp = 2; */
        if (message.sp !== 0)
            writer.tag(2, WireType.Varint).int32(message.sp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message signal.ABFResponse
 */
export const ABFResponse = new ABFResponse$Type();
/**
 * @generated ServiceType for protobuf service signal.ABFService
 */
export const ABFService = new ServiceType("signal.ABFService", [
    { name: "readAbf", options: {}, I: ABFRequest, O: ABFResponse }
]);
